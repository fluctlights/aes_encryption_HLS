-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_Encrypt_axi_AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    round : IN STD_LOGIC_VECTOR (3 downto 0);
    data_in_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_4_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_5_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_6_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_7_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_1213_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_15_read : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_0_ce0 : OUT STD_LOGIC;
    RoundKey_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_0_ce1 : OUT STD_LOGIC;
    RoundKey_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_1_ce0 : OUT STD_LOGIC;
    RoundKey_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_1_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_1_ce1 : OUT STD_LOGIC;
    RoundKey_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_2_ce0 : OUT STD_LOGIC;
    RoundKey_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_2_ce1 : OUT STD_LOGIC;
    RoundKey_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_3_ce0 : OUT STD_LOGIC;
    RoundKey_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_3_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_3_ce1 : OUT STD_LOGIC;
    RoundKey_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_4_ce0 : OUT STD_LOGIC;
    RoundKey_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_4_ce1 : OUT STD_LOGIC;
    RoundKey_4_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_5_ce0 : OUT STD_LOGIC;
    RoundKey_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_5_ce1 : OUT STD_LOGIC;
    RoundKey_5_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_6_ce0 : OUT STD_LOGIC;
    RoundKey_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_6_ce1 : OUT STD_LOGIC;
    RoundKey_6_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_7_ce0 : OUT STD_LOGIC;
    RoundKey_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_7_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    RoundKey_7_ce1 : OUT STD_LOGIC;
    RoundKey_7_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AES_Encrypt_axi_AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal data_in_15_read_2_reg_588 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_in_14_read_2_reg_593 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_13_read_2_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_1213_read_2_reg_603 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_11_read_2_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_10_read_2_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_9_read11_reg_618 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_8_read_2_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_7_read_2_reg_628 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_6_read_2_reg_633 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_5_read_2_reg_638 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_4_read_2_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_3_read_2_reg_648 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_2_read_2_reg_653 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_1_read_2_reg_658 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_in_0_read_2_reg_663 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln224_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln224_1_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_374_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln224_fu_394_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln224_fu_412_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln225_fu_417_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln226_fu_422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln227_fu_427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln224_1_fu_432_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln225_1_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln226_1_fu_442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln227_1_fu_447_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln224_2_fu_452_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln225_2_fu_457_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln226_2_fu_462_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln227_2_fu_467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln224_3_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln225_3_fu_477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln226_3_fu_482_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln227_3_fu_487_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_in_0_read_2_reg_663 <= data_in_0_read;
                data_in_10_read_2_reg_613 <= data_in_10_read;
                data_in_11_read_2_reg_608 <= data_in_11_read;
                data_in_1213_read_2_reg_603 <= data_in_1213_read;
                data_in_13_read_2_reg_598 <= data_in_13_read;
                data_in_14_read_2_reg_593 <= data_in_14_read;
                data_in_15_read_2_reg_588 <= data_in_15_read;
                data_in_1_read_2_reg_658 <= data_in_1_read;
                data_in_2_read_2_reg_653 <= data_in_2_read;
                data_in_3_read_2_reg_648 <= data_in_3_read;
                data_in_4_read_2_reg_643 <= data_in_4_read;
                data_in_5_read_2_reg_638 <= data_in_5_read;
                data_in_6_read_2_reg_633 <= data_in_6_read;
                data_in_7_read_2_reg_628 <= data_in_7_read;
                data_in_8_read_2_reg_623 <= data_in_8_read;
                data_in_9_read11_reg_618 <= data_in_9_read;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    RoundKey_0_address0 <= zext_ln224_1_fu_400_p1(5 - 1 downto 0);
    RoundKey_0_address1 <= zext_ln224_fu_382_p1(5 - 1 downto 0);

    RoundKey_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_0_ce0 <= ap_const_logic_1;
        else 
            RoundKey_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_0_ce1 <= ap_const_logic_1;
        else 
            RoundKey_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_1_address0 <= zext_ln224_1_fu_400_p1(5 - 1 downto 0);
    RoundKey_1_address1 <= zext_ln224_fu_382_p1(5 - 1 downto 0);

    RoundKey_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_1_ce0 <= ap_const_logic_1;
        else 
            RoundKey_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_1_ce1 <= ap_const_logic_1;
        else 
            RoundKey_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_2_address0 <= zext_ln224_1_fu_400_p1(5 - 1 downto 0);
    RoundKey_2_address1 <= zext_ln224_fu_382_p1(5 - 1 downto 0);

    RoundKey_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_2_ce0 <= ap_const_logic_1;
        else 
            RoundKey_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_2_ce1 <= ap_const_logic_1;
        else 
            RoundKey_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_3_address0 <= zext_ln224_1_fu_400_p1(5 - 1 downto 0);
    RoundKey_3_address1 <= zext_ln224_fu_382_p1(5 - 1 downto 0);

    RoundKey_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_3_ce0 <= ap_const_logic_1;
        else 
            RoundKey_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_3_ce1 <= ap_const_logic_1;
        else 
            RoundKey_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_4_address0 <= zext_ln224_1_fu_400_p1(5 - 1 downto 0);
    RoundKey_4_address1 <= zext_ln224_fu_382_p1(5 - 1 downto 0);

    RoundKey_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_4_ce0 <= ap_const_logic_1;
        else 
            RoundKey_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_4_ce1 <= ap_const_logic_1;
        else 
            RoundKey_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_5_address0 <= zext_ln224_1_fu_400_p1(5 - 1 downto 0);
    RoundKey_5_address1 <= zext_ln224_fu_382_p1(5 - 1 downto 0);

    RoundKey_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_5_ce0 <= ap_const_logic_1;
        else 
            RoundKey_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_5_ce1 <= ap_const_logic_1;
        else 
            RoundKey_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_6_address0 <= zext_ln224_1_fu_400_p1(5 - 1 downto 0);
    RoundKey_6_address1 <= zext_ln224_fu_382_p1(5 - 1 downto 0);

    RoundKey_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_6_ce0 <= ap_const_logic_1;
        else 
            RoundKey_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_6_ce1 <= ap_const_logic_1;
        else 
            RoundKey_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    RoundKey_7_address0 <= zext_ln224_1_fu_400_p1(5 - 1 downto 0);
    RoundKey_7_address1 <= zext_ln224_fu_382_p1(5 - 1 downto 0);

    RoundKey_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_7_ce0 <= ap_const_logic_1;
        else 
            RoundKey_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            RoundKey_7_ce1 <= ap_const_logic_1;
        else 
            RoundKey_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= xor_ln224_fu_412_p2;
    ap_return_1 <= xor_ln225_fu_417_p2;
    ap_return_10 <= xor_ln226_2_fu_462_p2;
    ap_return_11 <= xor_ln227_2_fu_467_p2;
    ap_return_12 <= xor_ln224_3_fu_472_p2;
    ap_return_13 <= xor_ln225_3_fu_477_p2;
    ap_return_14 <= xor_ln226_3_fu_482_p2;
    ap_return_15 <= xor_ln227_3_fu_487_p2;
    ap_return_2 <= xor_ln226_fu_422_p2;
    ap_return_3 <= xor_ln227_fu_427_p2;
    ap_return_4 <= xor_ln224_1_fu_432_p2;
    ap_return_5 <= xor_ln225_1_fu_437_p2;
    ap_return_6 <= xor_ln226_1_fu_442_p2;
    ap_return_7 <= xor_ln227_1_fu_447_p2;
    ap_return_8 <= xor_ln224_2_fu_452_p2;
    ap_return_9 <= xor_ln225_2_fu_457_p2;
    or_ln224_fu_394_p2 <= (shl_ln_fu_374_p3 or ap_const_lv5_1);
    shl_ln_fu_374_p3 <= (round & ap_const_lv1_0);
    xor_ln224_1_fu_432_p2 <= (data_in_4_read_2_reg_643 xor RoundKey_4_q1);
    xor_ln224_2_fu_452_p2 <= (data_in_8_read_2_reg_623 xor RoundKey_0_q0);
    xor_ln224_3_fu_472_p2 <= (data_in_1213_read_2_reg_603 xor RoundKey_4_q0);
    xor_ln224_fu_412_p2 <= (data_in_0_read_2_reg_663 xor RoundKey_0_q1);
    xor_ln225_1_fu_437_p2 <= (data_in_5_read_2_reg_638 xor RoundKey_5_q1);
    xor_ln225_2_fu_457_p2 <= (data_in_9_read11_reg_618 xor RoundKey_1_q0);
    xor_ln225_3_fu_477_p2 <= (data_in_13_read_2_reg_598 xor RoundKey_5_q0);
    xor_ln225_fu_417_p2 <= (data_in_1_read_2_reg_658 xor RoundKey_1_q1);
    xor_ln226_1_fu_442_p2 <= (data_in_6_read_2_reg_633 xor RoundKey_6_q1);
    xor_ln226_2_fu_462_p2 <= (data_in_10_read_2_reg_613 xor RoundKey_2_q0);
    xor_ln226_3_fu_482_p2 <= (data_in_14_read_2_reg_593 xor RoundKey_6_q0);
    xor_ln226_fu_422_p2 <= (data_in_2_read_2_reg_653 xor RoundKey_2_q1);
    xor_ln227_1_fu_447_p2 <= (data_in_7_read_2_reg_628 xor RoundKey_7_q1);
    xor_ln227_2_fu_467_p2 <= (data_in_11_read_2_reg_608 xor RoundKey_3_q0);
    xor_ln227_3_fu_487_p2 <= (data_in_15_read_2_reg_588 xor RoundKey_7_q0);
    xor_ln227_fu_427_p2 <= (data_in_3_read_2_reg_648 xor RoundKey_3_q1);
    zext_ln224_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln224_fu_394_p2),64));
    zext_ln224_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_374_p3),64));
end behav;
