// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module AES_Encrypt_axi_SubBytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_read,
        data_1_read,
        data_2_read,
        data_3_read,
        data_4_read,
        data_5_read,
        data_6_read,
        data_7_read,
        data_8_read,
        data_9_read,
        data_10_read,
        data_11_read,
        data_1213_read,
        data_13_read,
        data_14_read,
        data_15_read,
        s_box_address0,
        s_box_ce0,
        s_box_q0,
        s_box_address1,
        s_box_ce1,
        s_box_q1,
        s_box_address2,
        s_box_ce2,
        s_box_q2,
        s_box_address3,
        s_box_ce3,
        s_box_q3,
        s_box_address4,
        s_box_ce4,
        s_box_q4,
        s_box_address5,
        s_box_ce5,
        s_box_q5,
        s_box_address6,
        s_box_ce6,
        s_box_q6,
        s_box_address7,
        s_box_ce7,
        s_box_q7,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [7:0] data_0_read;
input  [7:0] data_1_read;
input  [7:0] data_2_read;
input  [7:0] data_3_read;
input  [7:0] data_4_read;
input  [7:0] data_5_read;
input  [7:0] data_6_read;
input  [7:0] data_7_read;
input  [7:0] data_8_read;
input  [7:0] data_9_read;
input  [7:0] data_10_read;
input  [7:0] data_11_read;
input  [7:0] data_1213_read;
input  [7:0] data_13_read;
input  [7:0] data_14_read;
input  [7:0] data_15_read;
output  [7:0] s_box_address0;
output   s_box_ce0;
input  [7:0] s_box_q0;
output  [7:0] s_box_address1;
output   s_box_ce1;
input  [7:0] s_box_q1;
output  [7:0] s_box_address2;
output   s_box_ce2;
input  [7:0] s_box_q2;
output  [7:0] s_box_address3;
output   s_box_ce3;
input  [7:0] s_box_q3;
output  [7:0] s_box_address4;
output   s_box_ce4;
input  [7:0] s_box_q4;
output  [7:0] s_box_address5;
output   s_box_ce5;
input  [7:0] s_box_q5;
output  [7:0] s_box_address6;
output   s_box_ce6;
input  [7:0] s_box_q6;
output  [7:0] s_box_address7;
output   s_box_ce7;
input  [7:0] s_box_q7;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] s_box_address0;
reg s_box_ce0;
reg[7:0] s_box_address1;
reg s_box_ce1;
reg[7:0] s_box_address2;
reg s_box_ce2;
reg[7:0] s_box_address3;
reg s_box_ce3;
reg[7:0] s_box_address4;
reg s_box_ce4;
reg[7:0] s_box_address5;
reg s_box_ce5;
reg[7:0] s_box_address6;
reg s_box_ce6;
reg[7:0] s_box_address7;
reg s_box_ce7;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] s_box_load_reg_505;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] s_box_load_1_reg_510;
reg   [7:0] s_box_load_2_reg_515;
reg   [7:0] s_box_load_3_reg_520;
reg   [7:0] s_box_load_4_reg_525;
reg   [7:0] s_box_load_5_reg_530;
reg   [7:0] s_box_load_6_reg_535;
reg   [7:0] s_box_load_7_reg_540;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg   [7:0] ap_port_reg_data_8_read;
reg   [7:0] ap_port_reg_data_9_read;
reg   [7:0] ap_port_reg_data_10_read;
reg   [7:0] ap_port_reg_data_11_read;
reg   [7:0] ap_port_reg_data_1213_read;
reg   [7:0] ap_port_reg_data_13_read;
reg   [7:0] ap_port_reg_data_14_read;
reg   [7:0] ap_port_reg_data_15_read;
wire   [63:0] zext_ln119_fu_297_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln119_1_fu_302_p1;
wire   [63:0] zext_ln119_2_fu_307_p1;
wire   [63:0] zext_ln119_3_fu_312_p1;
wire   [63:0] zext_ln119_4_fu_317_p1;
wire   [63:0] zext_ln119_5_fu_322_p1;
wire   [63:0] zext_ln119_6_fu_327_p1;
wire   [63:0] zext_ln119_7_fu_332_p1;
wire   [63:0] zext_ln119_8_fu_337_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln119_9_fu_342_p1;
wire   [63:0] zext_ln119_10_fu_347_p1;
wire   [63:0] zext_ln119_11_fu_352_p1;
wire   [63:0] zext_ln119_12_fu_357_p1;
wire   [63:0] zext_ln119_13_fu_362_p1;
wire   [63:0] zext_ln119_14_fu_367_p1;
wire   [63:0] zext_ln119_15_fu_372_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_reset_start_pp0;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_data_10_read <= data_10_read;
        ap_port_reg_data_11_read <= data_11_read;
        ap_port_reg_data_1213_read <= data_1213_read;
        ap_port_reg_data_13_read <= data_13_read;
        ap_port_reg_data_14_read <= data_14_read;
        ap_port_reg_data_15_read <= data_15_read;
        ap_port_reg_data_8_read <= data_8_read;
        ap_port_reg_data_9_read <= data_9_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        s_box_load_1_reg_510 <= s_box_q6;
        s_box_load_2_reg_515 <= s_box_q5;
        s_box_load_3_reg_520 <= s_box_q4;
        s_box_load_4_reg_525 <= s_box_q3;
        s_box_load_5_reg_530 <= s_box_q2;
        s_box_load_6_reg_535 <= s_box_q1;
        s_box_load_7_reg_540 <= s_box_q0;
        s_box_load_reg_505 <= s_box_q7;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b1))) begin
        ap_reset_start_pp0 = 1'b1;
    end else begin
        ap_reset_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            s_box_address0 = zext_ln119_15_fu_372_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_box_address0 = zext_ln119_7_fu_332_p1;
        end else begin
            s_box_address0 = 'bx;
        end
    end else begin
        s_box_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            s_box_address1 = zext_ln119_14_fu_367_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_box_address1 = zext_ln119_6_fu_327_p1;
        end else begin
            s_box_address1 = 'bx;
        end
    end else begin
        s_box_address1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            s_box_address2 = zext_ln119_13_fu_362_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_box_address2 = zext_ln119_5_fu_322_p1;
        end else begin
            s_box_address2 = 'bx;
        end
    end else begin
        s_box_address2 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            s_box_address3 = zext_ln119_12_fu_357_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_box_address3 = zext_ln119_4_fu_317_p1;
        end else begin
            s_box_address3 = 'bx;
        end
    end else begin
        s_box_address3 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            s_box_address4 = zext_ln119_11_fu_352_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_box_address4 = zext_ln119_3_fu_312_p1;
        end else begin
            s_box_address4 = 'bx;
        end
    end else begin
        s_box_address4 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            s_box_address5 = zext_ln119_10_fu_347_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_box_address5 = zext_ln119_2_fu_307_p1;
        end else begin
            s_box_address5 = 'bx;
        end
    end else begin
        s_box_address5 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            s_box_address6 = zext_ln119_9_fu_342_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_box_address6 = zext_ln119_1_fu_302_p1;
        end else begin
            s_box_address6 = 'bx;
        end
    end else begin
        s_box_address6 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            s_box_address7 = zext_ln119_8_fu_337_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_box_address7 = zext_ln119_fu_297_p1;
        end else begin
            s_box_address7 = 'bx;
        end
    end else begin
        s_box_address7 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        s_box_ce0 = 1'b1;
    end else begin
        s_box_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        s_box_ce1 = 1'b1;
    end else begin
        s_box_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        s_box_ce2 = 1'b1;
    end else begin
        s_box_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        s_box_ce3 = 1'b1;
    end else begin
        s_box_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        s_box_ce4 = 1'b1;
    end else begin
        s_box_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        s_box_ce5 = 1'b1;
    end else begin
        s_box_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        s_box_ce6 = 1'b1;
    end else begin
        s_box_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        s_box_ce7 = 1'b1;
    end else begin
        s_box_ce7 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_idle_pp0_1to1 == 1'b1) & (ap_start == 1'b0)) & ~((ap_reset_start_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_reset_start_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = s_box_load_reg_505;

assign ap_return_1 = s_box_load_1_reg_510;

assign ap_return_10 = s_box_q5;

assign ap_return_11 = s_box_q4;

assign ap_return_12 = s_box_q3;

assign ap_return_13 = s_box_q2;

assign ap_return_14 = s_box_q1;

assign ap_return_15 = s_box_q0;

assign ap_return_2 = s_box_load_2_reg_515;

assign ap_return_3 = s_box_load_3_reg_520;

assign ap_return_4 = s_box_load_4_reg_525;

assign ap_return_5 = s_box_load_5_reg_530;

assign ap_return_6 = s_box_load_6_reg_535;

assign ap_return_7 = s_box_load_7_reg_540;

assign ap_return_8 = s_box_q7;

assign ap_return_9 = s_box_q6;

assign zext_ln119_10_fu_347_p1 = ap_port_reg_data_10_read;

assign zext_ln119_11_fu_352_p1 = ap_port_reg_data_11_read;

assign zext_ln119_12_fu_357_p1 = ap_port_reg_data_1213_read;

assign zext_ln119_13_fu_362_p1 = ap_port_reg_data_13_read;

assign zext_ln119_14_fu_367_p1 = ap_port_reg_data_14_read;

assign zext_ln119_15_fu_372_p1 = ap_port_reg_data_15_read;

assign zext_ln119_1_fu_302_p1 = data_1_read;

assign zext_ln119_2_fu_307_p1 = data_2_read;

assign zext_ln119_3_fu_312_p1 = data_3_read;

assign zext_ln119_4_fu_317_p1 = data_4_read;

assign zext_ln119_5_fu_322_p1 = data_5_read;

assign zext_ln119_6_fu_327_p1 = data_6_read;

assign zext_ln119_7_fu_332_p1 = data_7_read;

assign zext_ln119_8_fu_337_p1 = ap_port_reg_data_8_read;

assign zext_ln119_9_fu_342_p1 = ap_port_reg_data_9_read;

assign zext_ln119_fu_297_p1 = data_0_read;

endmodule //AES_Encrypt_axi_SubBytes
