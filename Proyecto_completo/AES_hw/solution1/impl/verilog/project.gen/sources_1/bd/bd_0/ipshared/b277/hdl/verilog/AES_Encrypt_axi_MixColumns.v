// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module AES_Encrypt_axi_MixColumns (
        ap_ready,
        data_in_0_read,
        data_in_1_read,
        data_in_2_read,
        data_in_3_read,
        data_in_4_read,
        data_in_5_read,
        data_in_6_read,
        data_in_7_read,
        data_in_8_read,
        data_in_9_read,
        data_in_10_read,
        data_in_11_read,
        data_in_1213_read,
        data_in_13_read,
        data_in_14_read,
        data_in_15_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);


output   ap_ready;
input  [7:0] data_in_0_read;
input  [7:0] data_in_1_read;
input  [7:0] data_in_2_read;
input  [7:0] data_in_3_read;
input  [7:0] data_in_4_read;
input  [7:0] data_in_5_read;
input  [7:0] data_in_6_read;
input  [7:0] data_in_7_read;
input  [7:0] data_in_8_read;
input  [7:0] data_in_9_read;
input  [7:0] data_in_10_read;
input  [7:0] data_in_11_read;
input  [7:0] data_in_1213_read;
input  [7:0] data_in_13_read;
input  [7:0] data_in_14_read;
input  [7:0] data_in_15_read;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

wire   [7:0] Tm_fu_150_p2;
wire   [7:0] xor_ln99_1_fu_156_p2;
wire   [0:0] tmp_fu_174_p3;
wire   [7:0] shl_ln101_fu_168_p2;
wire   [7:0] select_ln102_fu_182_p3;
wire   [7:0] Tmp_fu_162_p2;
wire   [7:0] xor_ln102_2_fu_196_p2;
wire   [7:0] xor_ln102_fu_190_p2;
wire   [7:0] Tm_1_fu_208_p2;
wire   [0:0] tmp_1_fu_220_p3;
wire   [7:0] shl_ln104_fu_214_p2;
wire   [7:0] select_ln105_fu_228_p3;
wire   [7:0] xor_ln105_2_fu_242_p2;
wire   [7:0] xor_ln105_fu_236_p2;
wire   [7:0] Tm_2_fu_254_p2;
wire   [0:0] tmp_2_fu_266_p3;
wire   [7:0] shl_ln107_fu_260_p2;
wire   [7:0] select_ln108_fu_274_p3;
wire   [7:0] xor_ln108_2_fu_288_p2;
wire   [7:0] xor_ln108_fu_282_p2;
wire   [7:0] Tm_3_fu_300_p2;
wire   [0:0] tmp_3_fu_312_p3;
wire   [7:0] select_ln111_fu_320_p3;
wire   [7:0] xor_ln111_4_fu_328_p2;
wire   [7:0] shl_ln110_fu_306_p2;
wire   [7:0] Tm_4_fu_340_p2;
wire   [7:0] xor_ln99_3_fu_346_p2;
wire   [0:0] tmp_4_fu_364_p3;
wire   [7:0] shl_ln101_1_fu_358_p2;
wire   [7:0] select_ln102_1_fu_372_p3;
wire   [7:0] Tmp_1_fu_352_p2;
wire   [7:0] xor_ln102_6_fu_386_p2;
wire   [7:0] xor_ln102_4_fu_380_p2;
wire   [7:0] Tm_5_fu_398_p2;
wire   [0:0] tmp_5_fu_410_p3;
wire   [7:0] shl_ln104_1_fu_404_p2;
wire   [7:0] select_ln105_1_fu_418_p3;
wire   [7:0] xor_ln105_6_fu_432_p2;
wire   [7:0] xor_ln105_4_fu_426_p2;
wire   [7:0] Tm_6_fu_444_p2;
wire   [0:0] tmp_6_fu_456_p3;
wire   [7:0] shl_ln107_1_fu_450_p2;
wire   [7:0] select_ln108_1_fu_464_p3;
wire   [7:0] xor_ln108_6_fu_478_p2;
wire   [7:0] xor_ln108_4_fu_472_p2;
wire   [7:0] Tm_7_fu_490_p2;
wire   [0:0] tmp_7_fu_502_p3;
wire   [7:0] select_ln111_1_fu_510_p3;
wire   [7:0] xor_ln111_5_fu_518_p2;
wire   [7:0] shl_ln110_1_fu_496_p2;
wire   [7:0] Tm_8_fu_530_p2;
wire   [7:0] xor_ln99_5_fu_536_p2;
wire   [0:0] tmp_8_fu_554_p3;
wire   [7:0] shl_ln101_2_fu_548_p2;
wire   [7:0] select_ln102_2_fu_562_p3;
wire   [7:0] Tmp_2_fu_542_p2;
wire   [7:0] xor_ln102_9_fu_576_p2;
wire   [7:0] xor_ln102_8_fu_570_p2;
wire   [7:0] Tm_9_fu_588_p2;
wire   [0:0] tmp_9_fu_600_p3;
wire   [7:0] shl_ln104_2_fu_594_p2;
wire   [7:0] select_ln105_2_fu_608_p3;
wire   [7:0] xor_ln105_9_fu_622_p2;
wire   [7:0] xor_ln105_8_fu_616_p2;
wire   [7:0] Tm_10_fu_634_p2;
wire   [0:0] tmp_10_fu_646_p3;
wire   [7:0] shl_ln107_2_fu_640_p2;
wire   [7:0] select_ln108_2_fu_654_p3;
wire   [7:0] xor_ln108_9_fu_668_p2;
wire   [7:0] xor_ln108_8_fu_662_p2;
wire   [7:0] Tm_11_fu_680_p2;
wire   [0:0] tmp_11_fu_692_p3;
wire   [7:0] select_ln111_2_fu_700_p3;
wire   [7:0] xor_ln111_6_fu_708_p2;
wire   [7:0] shl_ln110_2_fu_686_p2;
wire   [7:0] Tm_12_fu_720_p2;
wire   [7:0] xor_ln99_7_fu_726_p2;
wire   [0:0] tmp_12_fu_744_p3;
wire   [7:0] shl_ln101_3_fu_738_p2;
wire   [7:0] select_ln102_3_fu_752_p3;
wire   [7:0] Tmp_3_fu_732_p2;
wire   [7:0] xor_ln102_11_fu_766_p2;
wire   [7:0] xor_ln102_10_fu_760_p2;
wire   [7:0] Tm_13_fu_778_p2;
wire   [0:0] tmp_13_fu_790_p3;
wire   [7:0] shl_ln104_3_fu_784_p2;
wire   [7:0] select_ln105_3_fu_798_p3;
wire   [7:0] xor_ln105_11_fu_812_p2;
wire   [7:0] xor_ln105_10_fu_806_p2;
wire   [7:0] Tm_14_fu_824_p2;
wire   [0:0] tmp_14_fu_836_p3;
wire   [7:0] shl_ln107_3_fu_830_p2;
wire   [7:0] select_ln108_3_fu_844_p3;
wire   [7:0] xor_ln108_11_fu_858_p2;
wire   [7:0] xor_ln108_10_fu_852_p2;
wire   [7:0] Tm_15_fu_870_p2;
wire   [0:0] tmp_15_fu_882_p3;
wire   [7:0] select_ln111_3_fu_890_p3;
wire   [7:0] xor_ln111_7_fu_898_p2;
wire   [7:0] shl_ln110_3_fu_876_p2;
wire   [7:0] xor_ln102_1_fu_202_p2;
wire   [7:0] xor_ln105_1_fu_248_p2;
wire   [7:0] xor_ln108_1_fu_294_p2;
wire   [7:0] xor_ln111_fu_334_p2;
wire   [7:0] xor_ln102_3_fu_392_p2;
wire   [7:0] xor_ln105_3_fu_438_p2;
wire   [7:0] xor_ln108_3_fu_484_p2;
wire   [7:0] xor_ln111_1_fu_524_p2;
wire   [7:0] xor_ln102_5_fu_582_p2;
wire   [7:0] xor_ln105_5_fu_628_p2;
wire   [7:0] xor_ln108_5_fu_674_p2;
wire   [7:0] xor_ln111_2_fu_714_p2;
wire   [7:0] xor_ln102_7_fu_772_p2;
wire   [7:0] xor_ln105_7_fu_818_p2;
wire   [7:0] xor_ln108_7_fu_864_p2;
wire   [7:0] xor_ln111_3_fu_904_p2;

assign Tm_10_fu_634_p2 = (data_in_11_read ^ data_in_10_read);

assign Tm_11_fu_680_p2 = (data_in_8_read ^ data_in_11_read);

assign Tm_12_fu_720_p2 = (data_in_13_read ^ data_in_1213_read);

assign Tm_13_fu_778_p2 = (data_in_14_read ^ data_in_13_read);

assign Tm_14_fu_824_p2 = (data_in_15_read ^ data_in_14_read);

assign Tm_15_fu_870_p2 = (data_in_15_read ^ data_in_1213_read);

assign Tm_1_fu_208_p2 = (data_in_2_read ^ data_in_1_read);

assign Tm_2_fu_254_p2 = (data_in_3_read ^ data_in_2_read);

assign Tm_3_fu_300_p2 = (data_in_3_read ^ data_in_0_read);

assign Tm_4_fu_340_p2 = (data_in_5_read ^ data_in_4_read);

assign Tm_5_fu_398_p2 = (data_in_6_read ^ data_in_5_read);

assign Tm_6_fu_444_p2 = (data_in_7_read ^ data_in_6_read);

assign Tm_7_fu_490_p2 = (data_in_7_read ^ data_in_4_read);

assign Tm_8_fu_530_p2 = (data_in_9_read ^ data_in_8_read);

assign Tm_9_fu_588_p2 = (data_in_9_read ^ data_in_10_read);

assign Tm_fu_150_p2 = (data_in_1_read ^ data_in_0_read);

assign Tmp_1_fu_352_p2 = (xor_ln99_3_fu_346_p2 ^ data_in_7_read);

assign Tmp_2_fu_542_p2 = (xor_ln99_5_fu_536_p2 ^ data_in_11_read);

assign Tmp_3_fu_732_p2 = (xor_ln99_7_fu_726_p2 ^ data_in_15_read);

assign Tmp_fu_162_p2 = (xor_ln99_1_fu_156_p2 ^ data_in_3_read);

assign ap_ready = 1'b1;

assign select_ln102_1_fu_372_p3 = ((tmp_4_fu_364_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln102_2_fu_562_p3 = ((tmp_8_fu_554_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln102_3_fu_752_p3 = ((tmp_12_fu_744_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln102_fu_182_p3 = ((tmp_fu_174_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln105_1_fu_418_p3 = ((tmp_5_fu_410_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln105_2_fu_608_p3 = ((tmp_9_fu_600_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln105_3_fu_798_p3 = ((tmp_13_fu_790_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln105_fu_228_p3 = ((tmp_1_fu_220_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln108_1_fu_464_p3 = ((tmp_6_fu_456_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln108_2_fu_654_p3 = ((tmp_10_fu_646_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln108_3_fu_844_p3 = ((tmp_14_fu_836_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln108_fu_274_p3 = ((tmp_2_fu_266_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln111_1_fu_510_p3 = ((tmp_7_fu_502_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln111_2_fu_700_p3 = ((tmp_11_fu_692_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln111_3_fu_890_p3 = ((tmp_15_fu_882_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign select_ln111_fu_320_p3 = ((tmp_3_fu_312_p3[0:0] == 1'b1) ? 8'd27 : 8'd0);

assign shl_ln101_1_fu_358_p2 = Tm_4_fu_340_p2 << 8'd1;

assign shl_ln101_2_fu_548_p2 = Tm_8_fu_530_p2 << 8'd1;

assign shl_ln101_3_fu_738_p2 = Tm_12_fu_720_p2 << 8'd1;

assign shl_ln101_fu_168_p2 = Tm_fu_150_p2 << 8'd1;

assign shl_ln104_1_fu_404_p2 = Tm_5_fu_398_p2 << 8'd1;

assign shl_ln104_2_fu_594_p2 = Tm_9_fu_588_p2 << 8'd1;

assign shl_ln104_3_fu_784_p2 = Tm_13_fu_778_p2 << 8'd1;

assign shl_ln104_fu_214_p2 = Tm_1_fu_208_p2 << 8'd1;

assign shl_ln107_1_fu_450_p2 = Tm_6_fu_444_p2 << 8'd1;

assign shl_ln107_2_fu_640_p2 = Tm_10_fu_634_p2 << 8'd1;

assign shl_ln107_3_fu_830_p2 = Tm_14_fu_824_p2 << 8'd1;

assign shl_ln107_fu_260_p2 = Tm_2_fu_254_p2 << 8'd1;

assign shl_ln110_1_fu_496_p2 = Tm_7_fu_490_p2 << 8'd1;

assign shl_ln110_2_fu_686_p2 = Tm_11_fu_680_p2 << 8'd1;

assign shl_ln110_3_fu_876_p2 = Tm_15_fu_870_p2 << 8'd1;

assign shl_ln110_fu_306_p2 = Tm_3_fu_300_p2 << 8'd1;

assign tmp_10_fu_646_p3 = Tm_10_fu_634_p2[32'd7];

assign tmp_11_fu_692_p3 = Tm_11_fu_680_p2[32'd7];

assign tmp_12_fu_744_p3 = Tm_12_fu_720_p2[32'd7];

assign tmp_13_fu_790_p3 = Tm_13_fu_778_p2[32'd7];

assign tmp_14_fu_836_p3 = Tm_14_fu_824_p2[32'd7];

assign tmp_15_fu_882_p3 = Tm_15_fu_870_p2[32'd7];

assign tmp_1_fu_220_p3 = Tm_1_fu_208_p2[32'd7];

assign tmp_2_fu_266_p3 = Tm_2_fu_254_p2[32'd7];

assign tmp_3_fu_312_p3 = Tm_3_fu_300_p2[32'd7];

assign tmp_4_fu_364_p3 = Tm_4_fu_340_p2[32'd7];

assign tmp_5_fu_410_p3 = Tm_5_fu_398_p2[32'd7];

assign tmp_6_fu_456_p3 = Tm_6_fu_444_p2[32'd7];

assign tmp_7_fu_502_p3 = Tm_7_fu_490_p2[32'd7];

assign tmp_8_fu_554_p3 = Tm_8_fu_530_p2[32'd7];

assign tmp_9_fu_600_p3 = Tm_9_fu_588_p2[32'd7];

assign tmp_fu_174_p3 = Tm_fu_150_p2[32'd7];

assign xor_ln102_10_fu_760_p2 = (shl_ln101_3_fu_738_p2 ^ data_in_1213_read);

assign xor_ln102_11_fu_766_p2 = (select_ln102_3_fu_752_p3 ^ Tmp_3_fu_732_p2);

assign xor_ln102_1_fu_202_p2 = (xor_ln102_fu_190_p2 ^ xor_ln102_2_fu_196_p2);

assign xor_ln102_2_fu_196_p2 = (select_ln102_fu_182_p3 ^ Tmp_fu_162_p2);

assign xor_ln102_3_fu_392_p2 = (xor_ln102_6_fu_386_p2 ^ xor_ln102_4_fu_380_p2);

assign xor_ln102_4_fu_380_p2 = (shl_ln101_1_fu_358_p2 ^ data_in_4_read);

assign xor_ln102_5_fu_582_p2 = (xor_ln102_9_fu_576_p2 ^ xor_ln102_8_fu_570_p2);

assign xor_ln102_6_fu_386_p2 = (select_ln102_1_fu_372_p3 ^ Tmp_1_fu_352_p2);

assign xor_ln102_7_fu_772_p2 = (xor_ln102_11_fu_766_p2 ^ xor_ln102_10_fu_760_p2);

assign xor_ln102_8_fu_570_p2 = (shl_ln101_2_fu_548_p2 ^ data_in_8_read);

assign xor_ln102_9_fu_576_p2 = (select_ln102_2_fu_562_p3 ^ Tmp_2_fu_542_p2);

assign xor_ln102_fu_190_p2 = (shl_ln101_fu_168_p2 ^ data_in_0_read);

assign xor_ln105_10_fu_806_p2 = (shl_ln104_3_fu_784_p2 ^ data_in_13_read);

assign xor_ln105_11_fu_812_p2 = (select_ln105_3_fu_798_p3 ^ Tmp_3_fu_732_p2);

assign xor_ln105_1_fu_248_p2 = (xor_ln105_fu_236_p2 ^ xor_ln105_2_fu_242_p2);

assign xor_ln105_2_fu_242_p2 = (select_ln105_fu_228_p3 ^ Tmp_fu_162_p2);

assign xor_ln105_3_fu_438_p2 = (xor_ln105_6_fu_432_p2 ^ xor_ln105_4_fu_426_p2);

assign xor_ln105_4_fu_426_p2 = (shl_ln104_1_fu_404_p2 ^ data_in_5_read);

assign xor_ln105_5_fu_628_p2 = (xor_ln105_9_fu_622_p2 ^ xor_ln105_8_fu_616_p2);

assign xor_ln105_6_fu_432_p2 = (select_ln105_1_fu_418_p3 ^ Tmp_1_fu_352_p2);

assign xor_ln105_7_fu_818_p2 = (xor_ln105_11_fu_812_p2 ^ xor_ln105_10_fu_806_p2);

assign xor_ln105_8_fu_616_p2 = (shl_ln104_2_fu_594_p2 ^ data_in_9_read);

assign xor_ln105_9_fu_622_p2 = (select_ln105_2_fu_608_p3 ^ Tmp_2_fu_542_p2);

assign xor_ln105_fu_236_p2 = (shl_ln104_fu_214_p2 ^ data_in_1_read);

assign xor_ln108_10_fu_852_p2 = (data_in_15_read ^ Tm_12_fu_720_p2);

assign xor_ln108_11_fu_858_p2 = (shl_ln107_3_fu_830_p2 ^ select_ln108_3_fu_844_p3);

assign xor_ln108_1_fu_294_p2 = (xor_ln108_fu_282_p2 ^ xor_ln108_2_fu_288_p2);

assign xor_ln108_2_fu_288_p2 = (shl_ln107_fu_260_p2 ^ select_ln108_fu_274_p3);

assign xor_ln108_3_fu_484_p2 = (xor_ln108_6_fu_478_p2 ^ xor_ln108_4_fu_472_p2);

assign xor_ln108_4_fu_472_p2 = (data_in_7_read ^ Tm_4_fu_340_p2);

assign xor_ln108_5_fu_674_p2 = (xor_ln108_9_fu_668_p2 ^ xor_ln108_8_fu_662_p2);

assign xor_ln108_6_fu_478_p2 = (shl_ln107_1_fu_450_p2 ^ select_ln108_1_fu_464_p3);

assign xor_ln108_7_fu_864_p2 = (xor_ln108_11_fu_858_p2 ^ xor_ln108_10_fu_852_p2);

assign xor_ln108_8_fu_662_p2 = (data_in_11_read ^ Tm_8_fu_530_p2);

assign xor_ln108_9_fu_668_p2 = (shl_ln107_2_fu_640_p2 ^ select_ln108_2_fu_654_p3);

assign xor_ln108_fu_282_p2 = (data_in_3_read ^ Tm_fu_150_p2);

assign xor_ln111_1_fu_524_p2 = (xor_ln111_5_fu_518_p2 ^ shl_ln110_1_fu_496_p2);

assign xor_ln111_2_fu_714_p2 = (xor_ln111_6_fu_708_p2 ^ shl_ln110_2_fu_686_p2);

assign xor_ln111_3_fu_904_p2 = (xor_ln111_7_fu_898_p2 ^ shl_ln110_3_fu_876_p2);

assign xor_ln111_4_fu_328_p2 = (xor_ln99_1_fu_156_p2 ^ select_ln111_fu_320_p3);

assign xor_ln111_5_fu_518_p2 = (xor_ln99_3_fu_346_p2 ^ select_ln111_1_fu_510_p3);

assign xor_ln111_6_fu_708_p2 = (xor_ln99_5_fu_536_p2 ^ select_ln111_2_fu_700_p3);

assign xor_ln111_7_fu_898_p2 = (xor_ln99_7_fu_726_p2 ^ select_ln111_3_fu_890_p3);

assign xor_ln111_fu_334_p2 = (xor_ln111_4_fu_328_p2 ^ shl_ln110_fu_306_p2);

assign xor_ln99_1_fu_156_p2 = (data_in_2_read ^ Tm_fu_150_p2);

assign xor_ln99_3_fu_346_p2 = (data_in_6_read ^ Tm_4_fu_340_p2);

assign xor_ln99_5_fu_536_p2 = (data_in_10_read ^ Tm_8_fu_530_p2);

assign xor_ln99_7_fu_726_p2 = (data_in_14_read ^ Tm_12_fu_720_p2);

assign ap_return_0 = xor_ln102_1_fu_202_p2;

assign ap_return_1 = xor_ln105_1_fu_248_p2;

assign ap_return_10 = xor_ln108_5_fu_674_p2;

assign ap_return_11 = xor_ln111_2_fu_714_p2;

assign ap_return_12 = xor_ln102_7_fu_772_p2;

assign ap_return_13 = xor_ln105_7_fu_818_p2;

assign ap_return_14 = xor_ln108_7_fu_864_p2;

assign ap_return_15 = xor_ln111_3_fu_904_p2;

assign ap_return_2 = xor_ln108_1_fu_294_p2;

assign ap_return_3 = xor_ln111_fu_334_p2;

assign ap_return_4 = xor_ln102_3_fu_392_p2;

assign ap_return_5 = xor_ln105_3_fu_438_p2;

assign ap_return_6 = xor_ln108_3_fu_484_p2;

assign ap_return_7 = xor_ln111_1_fu_524_p2;

assign ap_return_8 = xor_ln102_5_fu_582_p2;

assign ap_return_9 = xor_ln105_5_fu_628_p2;

endmodule //AES_Encrypt_axi_MixColumns
